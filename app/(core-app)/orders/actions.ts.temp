export async function updateOrder(id: string, data: any) {
  try {
    // Get the existing order to compare changes
    const existingOrder = await db.order.findUnique({
      where: { id },
      include: {
        items: true,
        payments: true,
      },
    })
    
    if (!existingOrder) {
      throw new Error('Order not found')
    }
    
    let customer = data.customer
    
    // If customer doesn't have an ID, create a new customer
    if (customer && !customer.id) {
      customer = await createCustomer(customer)
    }
    
    // Calculate totals - use existing order values if data.items is not provided
    let totalAmount = existingOrder.totalAmount;
    
    if (data.items && Array.isArray(data.items)) {
      const subtotal = data.items.reduce((sum: number, item: any) => sum + item.total, 0);
      totalAmount = subtotal - (data.discount || 0);
    }
    
    // Calculate total payments (existing + new payment if provided)
